# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: gamudacove-microsites-lambda
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

custom:
    configs: ${file(config.json)}

provider:
    name: aws
    runtime: provided.al2
    architecture: arm64
    stage: dev
    timeout: 15
    region: ap-southeast-1
    versionFunctions: false
    endpointType: regional
    deploymentBucket:
        name: serverless-deploys-ds
    environment:
        MG_DOMAIN: ${self:custom.configs.MG_DOMAIN}
        TELEGRAM_CHAT_ID: ${self:custom.configs.TELEGRAM_CHAT_ID}
        SENTINO_ENDPOINT: ${self:custom.configs.SENTINO_ENDPOINT}
        MG_SENDER_EMAIL: ${self:custom.configs.MG_SENDER_EMAIL}
        MG_ADMIN_EMAIL: ${self:custom.configs.${sls:stage}.MG_ADMIN_EMAIL}
        DDBTABLE_PRODUCTS: ${self:custom.configs.${sls:stage}.DDBTABLE_PRODUCTS}
        SENTINO_PROJECT_ID: ${self:custom.configs.${sls:stage}.SENTINO_PROJECT_ID}
        SENTINO_SOURCE_ID: ${self:custom.configs.${sls:stage}.SENTINO_SOURCE_ID}
        TEST: ${self:custom.configs.${sls:stage}.TEST}
        FUNCTION_NAME: gamudacove
    iam:
      role:
        statements:
          - Effect: 'Allow'
            Resource: '*'
            Action: 
              - 'dynamodb:Scan'
              - 'dynamodb:PutItem'
              - 'ssm:GetParameters'

package:
    individually: true

functions:
    Products:
        name: ${sls:stage}-products
        handler: bootstrap
        package:
          artifact: build/lambda/products.zip
        events:
            - http:
                  path: products/contacts
                  cors: true
                  method: post
    authorizer:
        handler: bootstrap
        package:
          artifact: build/lambda/authorizer.zip

resources:
    Resources:
        ProductsResource:
            DeletionPolicy: Retain
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:provider.environment.DDBTABLE_PRODUCTS}
                DeletionProtectionEnabled: true
                AttributeDefinitions:
                    - AttributeName: uuid
                      AttributeType: S
                KeySchema:
                    - AttributeName: uuid
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                PointInTimeRecoverySpecification:
                    PointInTimeRecoveryEnabled: ${self:custom.configs.${sls:stage}.PITR_ACTIVE}
        GatewayResponse:
          Type: 'AWS::ApiGateway::GatewayResponse'
          Properties:
            ResponseParameters:
              gatewayresponse.header.WWW-Authenticate: "'Basic'"
            ResponseType: UNAUTHORIZED
            RestApiId:
              Ref: 'ApiGatewayRestApi'
            StatusCode: '401'
